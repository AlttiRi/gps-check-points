{"version":3,"file":"index.js","sources":["../src/components/Main.vue","../src/main.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport {Ref, ref} from \"vue\";\nimport {set, entries, createStore} from \"idb-keyval\";\nimport {formatDate} from \"@alttiri/util-js\";\n\nconst gpsPointsStore = createStore(\"GPS_Points_DB\", \"GPS_Points\");\n\nconst coordObj: Ref<GeolocationPosition | undefined> = ref();\nconst savedPoints: Ref<GeolocationPosition[]> = ref([]);\n\n!async function loadSavedPoints() {\n    const gpsEntries: Array<[number, GeolocationCoordinates]> = await entries(gpsPointsStore);\n    for (const gpsEntry of gpsEntries) {\n        savedPoints.value.push({\n            timestamp: gpsEntry[0],\n            coords: gpsEntry[1],\n        });\n    }\n    savedPoints.value = savedPoints.value.reverse()\n}();\n\n\nasync function getCoords(): Promise<GeolocationPosition> {\n    return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(\n            (location: GeolocationPosition) => resolve(location),\n            (error: GeolocationPositionError) => reject(error),\n            {\n                enableHighAccuracy: true,\n            },\n        );\n    });\n}\n\nfunction objectify<T>(target: T): T {\n    const obj: any = {};\n    for (const key in target) {\n        if (isObject(target[key])) {\n            obj[key] = objectify(target[key]);\n            continue;\n        }\n        obj[key] = target[key as keyof T];\n    }\n    return obj as T;\n}\n\nasync function onUpdateClick() {\n    try {\n        coordObj.value = await getCoords();\n        saved.value = false;\n    } catch (e) {\n        alert(JSON.stringify(objectify(e as GeolocationPositionError), null, \"  \"));\n    }\n}\nvoid onUpdateClick();\n\nconst saved = ref(false);\nasync function onSaveClick() {\n    if (!coordObj.value) {\n        return;\n    }\n    try {\n        await set(coordObj.value.timestamp, objectify(coordObj.value.coords), gpsPointsStore);\n        savedPoints.value.unshift(objectify(coordObj.value));\n        saved.value = true;\n    } catch (e) {\n        alert(JSON.stringify(objectify(e), null, \"  \"));\n    }\n}\n\nfunction isObject(target: any): target is object {\n    return typeof target === \"object\" && !Array.isArray(target) && target !== null;\n}\n</script>\n\n<template>\n    <div class=\"main\">\n        <button @click=\"onUpdateClick\">Update Point</button>\n        <button @click=\"onSaveClick\" :disabled=\"saved\">Save Point</button>\n        <table class=\"coord\" v-if=\"coordObj\">\n            <tr v-for=\"[k, v] of Object.entries(objectify(coordObj.coords)).filter(([_k, _v]) => _v)\">\n                <td>{{ k }}</td>: <td>{{ v }}</td>\n            </tr>\n            <tr class=\"date\">\n                <td>timestamp</td>: <td>{{ formatDate(coordObj.timestamp, \"YYYY.MM.DD HH:mm:SS\", false) }}</td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"saved\">\n        <div class=\"saved-coord\" v-if=\"savedPoints.length\">\n            <hr>\n            <div v-for=\"point of savedPoints\">\n                <div class=\"date\">{{ formatDate(point.timestamp, \"YYYY.MM.DD HH:mm:SS\", false) }}</div>\n                <div v-for=\"[k, v] of Object.entries(point.coords).filter(([_k, _v]) => _v)\">\n                    <span>{{ k }}</span>: <span>{{ v }}</span>\n                </div>\n                <hr>\n            </div>\n        </div>\n    </div>\n</template>\n\n<style scoped lang=\"scss\">\nbutton {\n    background-color: #4CAF50;\n    border: none;\n    color: white;\n    padding: 10px 20px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    cursor: pointer;\n    border-radius: 4px;\n    outline: 0;\n    margin: 5px;\n}\nbutton:active {\n    box-shadow: 0 0 3px grey;\n}\nbutton[disabled] {\n    background-color: gray;\n}\n.date {\n    color: grey;\n}\n</style>\n","import {createApp} from \"vue\";\nimport App from \"./App.vue\";\n\ncreateApp(App).mount(\"#app\");\n"],"names":["gpsPointsStore","createStore","coordObj","ref","savedPoints","gpsEntries","entries","gpsEntry","getCoords","resolve","reject","location","error","objectify","target","obj","key","isObject","onUpdateClick","saved","e","onSaveClick","set","createApp","App"],"mappings":"opCAKM,MAAAA,EAAiBC,EAAY,gBAAiB,YAAY,EAE1DC,EAAiDC,IACjDC,EAA0CD,EAAI,CAAA,CAAE,GAErD,gBAAiC,CACxB,MAAAE,EAAsD,MAAMC,EAAQN,CAAc,EACxF,UAAWO,KAAYF,EACnBD,EAAY,MAAM,KAAK,CACnB,UAAWG,EAAS,CAAC,EACrB,OAAQA,EAAS,CAAC,CAAA,CACrB,EAEOH,EAAA,MAAQA,EAAY,MAAM,QAAQ,CAAA,KAIlD,eAAeI,GAA0C,CACrD,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpC,UAAU,YAAY,mBACjBC,GAAkCF,EAAQE,CAAQ,EAClDC,GAAoCF,EAAOE,CAAK,EACjD,CACI,mBAAoB,EACxB,CAAA,CACJ,CACH,CACL,CAEA,SAASC,EAAaC,EAAc,CAChC,MAAMC,EAAW,CAAA,EACjB,UAAWC,KAAOF,EAAQ,CACtB,GAAIG,EAASH,EAAOE,CAAG,CAAC,EAAG,CACvBD,EAAIC,CAAG,EAAIH,EAAUC,EAAOE,CAAG,CAAC,EAChC,SAEAD,EAAAC,CAAG,EAAIF,EAAOE,CAAc,EAE7B,OAAAD,CACX,CAEA,eAAeG,GAAgB,CACvB,GAAA,CACShB,EAAA,MAAQ,MAAMM,IACvBW,EAAM,MAAQ,SACTC,GACL,MAAM,KAAK,UAAUP,EAAUO,CAA6B,EAAG,KAAM,IAAI,CAAC,CAC9E,CACJ,CACKF,EAAc,EAEb,MAAAC,EAAQhB,EAAI,EAAK,EACvB,eAAekB,GAAc,CACrB,GAACnB,EAAS,MAGV,GAAA,CACM,MAAAoB,EAAIpB,EAAS,MAAM,UAAWW,EAAUX,EAAS,MAAM,MAAM,EAAGF,CAAc,EACpFI,EAAY,MAAM,QAAQS,EAAUX,EAAS,KAAK,CAAC,EACnDiB,EAAM,MAAQ,SACTC,GACL,MAAM,KAAK,UAAUP,EAAUO,CAAC,EAAG,KAAM,IAAI,CAAC,CAClD,CACJ,CAEA,SAASH,EAASH,EAA+B,CACtC,OAAA,OAAOA,GAAW,UAAY,CAAC,MAAM,QAAQA,CAAM,GAAKA,IAAW,IAC9E,+oCCrEAS,EAAUC,CAAG,EAAE,MAAM,MAAM"}